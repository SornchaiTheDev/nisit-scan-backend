// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAllAdmins = `-- name: CountAllAdmins :one
SELECT COUNT(*) FROM admins
WHERE (email LIKE $1 OR full_name LIKE $2) AND deleted_at IS NULL
`

type CountAllAdminsParams struct {
	Email    string
	FullName string
}

func (q *Queries) CountAllAdmins(ctx context.Context, arg CountAllAdminsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAllAdmins, arg.Email, arg.FullName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admins (email,full_name) VALUES ($1,$2)
`

type CreateAdminParams struct {
	Email    string
	FullName string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.db.Exec(ctx, createAdmin, arg.Email, arg.FullName)
	return err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (name,place,date,host,admin_id) VALUES ($1,$2,$3,$4,$5)
`

type CreateEventParams struct {
	Name    string
	Place   string
	Date    pgtype.Date
	Host    string
	AdminID uuid.UUID
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.Name,
		arg.Place,
		arg.Date,
		arg.Host,
		arg.AdminID,
	)
	return err
}

const createParticipantRecord = `-- name: CreateParticipantRecord :one
INSERT INTO participants (barcode,event_id) VALUES ($1,$2)
RETURNING id, barcode, timestamp, event_id
`

type CreateParticipantRecordParams struct {
	Barcode string
	EventID uuid.UUID
}

func (q *Queries) CreateParticipantRecord(ctx context.Context, arg CreateParticipantRecordParams) (Participant, error) {
	row := q.db.QueryRow(ctx, createParticipantRecord, arg.Barcode, arg.EventID)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Barcode,
		&i.Timestamp,
		&i.EventID,
	)
	return i, err
}

type CreateStaffsRecordParams struct {
	Email   string
	EventID uuid.UUID
}

const deleteAllStaffFromEvent = `-- name: DeleteAllStaffFromEvent :exec
DELETE FROM staffs WHERE event_id = $1
`

func (q *Queries) DeleteAllStaffFromEvent(ctx context.Context, eventID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllStaffFromEvent, eventID)
	return err
}

const deleteEventById = `-- name: DeleteEventById :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEventById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventById, id)
	return err
}

const getActiveAdmins = `-- name: GetActiveAdmins :many
SELECT id, email, full_name, deleted_at FROM admins WHERE deleted_at IS NULL
`

func (q *Queries) GetActiveAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.Query(ctx, getActiveAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, email, full_name, deleted_at FROM admins
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.DeletedAt,
	)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT id, email, full_name, deleted_at FROM admins
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminById(ctx context.Context, id uuid.UUID) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminById, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.DeletedAt,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT id, email, full_name, deleted_at FROM admins
WHERE (email LIKE $1 OR full_name LIKE $2) AND deleted_at IS NULL
LIMIT $3 OFFSET $4
`

type GetAllAdminsParams struct {
	Email    string
	FullName string
	Limit    int32
	Offset   int32
}

func (q *Queries) GetAllAdmins(ctx context.Context, arg GetAllAdminsParams) ([]Admin, error) {
	rows, err := q.db.Query(ctx, getAllAdmins,
		arg.Email,
		arg.FullName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEvents = `-- name: GetAllEvents :many
SELECT events.id, name, place, date, host, admin_id, admins.id, email, full_name, deleted_at FROM events
INNER JOIN admins ON events.admin_id = admins.id
`

type GetAllEventsRow struct {
	ID        uuid.UUID
	Name      string
	Place     string
	Date      pgtype.Date
	Host      string
	AdminID   uuid.UUID
	ID_2      uuid.UUID
	Email     string
	FullName  string
	DeletedAt pgtype.Timestamp
}

func (q *Queries) GetAllEvents(ctx context.Context) ([]GetAllEventsRow, error) {
	rows, err := q.db.Query(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEventsRow
	for rows.Next() {
		var i GetAllEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Place,
			&i.Date,
			&i.Host,
			&i.AdminID,
			&i.ID_2,
			&i.Email,
			&i.FullName,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventById = `-- name: GetEventById :one
SELECT events.id, name, place, date, host, admin_id, admins.id, email, full_name, deleted_at FROM events
INNER JOIN admins ON events.admin_id = admins.id
WHERE events.id = $1
`

type GetEventByIdRow struct {
	ID        uuid.UUID
	Name      string
	Place     string
	Date      pgtype.Date
	Host      string
	AdminID   uuid.UUID
	ID_2      uuid.UUID
	Email     string
	FullName  string
	DeletedAt pgtype.Timestamp
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (GetEventByIdRow, error) {
	row := q.db.QueryRow(ctx, getEventById, id)
	var i GetEventByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Place,
		&i.Date,
		&i.Host,
		&i.AdminID,
		&i.ID_2,
		&i.Email,
		&i.FullName,
		&i.DeletedAt,
	)
	return i, err
}

const getParticipantCount = `-- name: GetParticipantCount :one
SELECT COUNT(*) FROM participants
WHERE event_id = $1 AND barcode LIKE $2
`

type GetParticipantCountParams struct {
	EventID uuid.UUID
	Barcode string
}

func (q *Queries) GetParticipantCount(ctx context.Context, arg GetParticipantCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getParticipantCount, arg.EventID, arg.Barcode)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getParticipantPagination = `-- name: GetParticipantPagination :many
SELECT id, barcode, timestamp, event_id FROM participants 
WHERE event_id = $1 AND barcode LIKE $2
LIMIT $3 OFFSET $4
`

type GetParticipantPaginationParams struct {
	EventID uuid.UUID
	Barcode string
	Limit   int32
	Offset  int32
}

func (q *Queries) GetParticipantPagination(ctx context.Context, arg GetParticipantPaginationParams) ([]Participant, error) {
	rows, err := q.db.Query(ctx, getParticipantPagination,
		arg.EventID,
		arg.Barcode,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.Barcode,
			&i.Timestamp,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffByEventId = `-- name: GetStaffByEventId :many
SELECT id, email, event_id FROM staffs WHERE event_id = $1
`

func (q *Queries) GetStaffByEventId(ctx context.Context, eventID uuid.UUID) ([]Staff, error) {
	rows, err := q.db.Query(ctx, getStaffByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Staff
	for rows.Next() {
		var i Staff
		if err := rows.Scan(&i.ID, &i.Email, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffById = `-- name: GetStaffById :one
SELECT id, email, event_id FROM staffs WHERE id = $1
`

func (q *Queries) GetStaffById(ctx context.Context, id uuid.UUID) (Staff, error) {
	row := q.db.QueryRow(ctx, getStaffById, id)
	var i Staff
	err := row.Scan(&i.ID, &i.Email, &i.EventID)
	return i, err
}

const updateAdminById = `-- name: UpdateAdminById :exec
UPDATE admins 
SET email = $1, full_name = $2
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateAdminByIdParams struct {
	Email    string
	FullName string
	ID       uuid.UUID
}

func (q *Queries) UpdateAdminById(ctx context.Context, arg UpdateAdminByIdParams) error {
	_, err := q.db.Exec(ctx, updateAdminById, arg.Email, arg.FullName, arg.ID)
	return err
}

const updateEventById = `-- name: UpdateEventById :exec
UPDATE events
SET name = $1, place = $2, date = $3, host = $4
WHERE id = $5
`

type UpdateEventByIdParams struct {
	Name  string
	Place string
	Date  pgtype.Date
	Host  string
	ID    uuid.UUID
}

func (q *Queries) UpdateEventById(ctx context.Context, arg UpdateEventByIdParams) error {
	_, err := q.db.Exec(ctx, updateEventById,
		arg.Name,
		arg.Place,
		arg.Date,
		arg.Host,
		arg.ID,
	)
	return err
}
