// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countAllAdmins = `-- name: CountAllAdmins :one
SELECT COUNT(*) FROM admins
WHERE (email LIKE $1 OR full_name LIKE $2) AND deleted_at IS NULL
`

type CountAllAdminsParams struct {
	Email    string
	FullName string
}

func (q *Queries) CountAllAdmins(ctx context.Context, arg CountAllAdminsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAllAdmins, arg.Email, arg.FullName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmin = `-- name: CreateAdmin :exec
INSERT INTO admins (email,full_name) VALUES ($1,$2)
`

type CreateAdminParams struct {
	Email    string
	FullName string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.db.Exec(ctx, createAdmin, arg.Email, arg.FullName)
	return err
}

const getActiveAdmins = `-- name: GetActiveAdmins :many
SELECT id, email, full_name, deleted_at FROM admins WHERE deleted_at IS NULL
`

func (q *Queries) GetActiveAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.Query(ctx, getActiveAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, email, full_name, deleted_at FROM admins
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.DeletedAt,
	)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT id, email, full_name, deleted_at FROM admins
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminById(ctx context.Context, id uuid.UUID) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminById, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.DeletedAt,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT id, email, full_name, deleted_at FROM admins
WHERE (email LIKE $1 OR full_name LIKE $2) AND deleted_at IS NULL
ORDER BY email
LIMIT $3 OFFSET $4
`

type GetAllAdminsParams struct {
	Email    string
	FullName string
	Limit    int32
	Offset   int32
}

func (q *Queries) GetAllAdmins(ctx context.Context, arg GetAllAdminsParams) ([]Admin, error) {
	rows, err := q.db.Query(ctx, getAllAdmins,
		arg.Email,
		arg.FullName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminById = `-- name: UpdateAdminById :exec
UPDATE admins 
SET email = $1, full_name = $2
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateAdminByIdParams struct {
	Email    string
	FullName string
	ID       uuid.UUID
}

func (q *Queries) UpdateAdminById(ctx context.Context, arg UpdateAdminByIdParams) error {
	_, err := q.db.Exec(ctx, updateAdminById, arg.Email, arg.FullName, arg.ID)
	return err
}
