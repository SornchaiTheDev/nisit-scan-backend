// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type CreateStaffsRecordParams struct {
	Email   string
	EventID uuid.UUID
}

const deleteAllStaffFromEvent = `-- name: DeleteAllStaffFromEvent :exec
DELETE FROM staffs WHERE event_id = $1
`

func (q *Queries) DeleteAllStaffFromEvent(ctx context.Context, eventID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllStaffFromEvent, eventID)
	return err
}

const getStaffByEventId = `-- name: GetStaffByEventId :many
SELECT email, event_id FROM staffs WHERE event_id = $1
`

func (q *Queries) GetStaffByEventId(ctx context.Context, eventID uuid.UUID) ([]Staff, error) {
	rows, err := q.db.Query(ctx, getStaffByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Staff
	for rows.Next() {
		var i Staff
		if err := rows.Scan(&i.Email, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffsByEmail = `-- name: GetStaffsByEmail :many
SELECT email, event_id FROM staffs WHERE email = $1
`

func (q *Queries) GetStaffsByEmail(ctx context.Context, email string) ([]Staff, error) {
	rows, err := q.db.Query(ctx, getStaffsByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Staff
	for rows.Next() {
		var i Staff
		if err := rows.Scan(&i.Email, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffsByEmailAndEventId = `-- name: GetStaffsByEmailAndEventId :one
SELECT email, event_id FROM staffs WHERE event_id = $1 AND email = $2
`

type GetStaffsByEmailAndEventIdParams struct {
	EventID uuid.UUID
	Email   string
}

func (q *Queries) GetStaffsByEmailAndEventId(ctx context.Context, arg GetStaffsByEmailAndEventIdParams) (Staff, error) {
	row := q.db.QueryRow(ctx, getStaffsByEmailAndEventId, arg.EventID, arg.Email)
	var i Staff
	err := row.Scan(&i.Email, &i.EventID)
	return i, err
}
